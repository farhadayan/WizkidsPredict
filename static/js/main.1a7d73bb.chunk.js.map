{"version":3,"sources":["component/App.js","index.js"],"names":["App","props","PredictWord","e","setState","inputWord","target","value","callService","fetch","this","state","headers","then","response","json","data","catch","error","console","log","selectWord","indexing","getAttribute","ind","split","result","length","slice","change","recordList","map","record","index","push","data_index","onClick","type","name","onChange","renderListing","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAsEeA,E,kDAlEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,YAAY,SAACC,GACX,EAAKC,SAAS,CAACC,UAAUF,EAAEG,OAAOC,QAClC,EAAKC,YAAYL,IAXD,EAelBK,YAAY,SAACL,GAKX,EAAKC,SAAS,CAACC,UAAUF,EAAEG,OAAOC,QAAO,WAAW,IAAD,OACnDE,MAAO,sEAAmEC,KAAKC,MAAMN,UAC/E,CAACO,QAAS,CAAC,cAAkB,uGAC5BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,EAAKZ,SAAS,CAACY,KAAMA,OACnCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,kBAAmBF,UAzBrC,EA6BhBG,WAAW,SAAClB,GACT,IAAImB,EAAYnB,EAAEG,OAAOiB,aAAa,cAClCC,EAAI,EAAKb,MAAMN,UAAUoB,MAAM,KAC/BC,EAAO,EAAKf,MAAMN,UAAUoB,MAAMD,EAAIA,EAAIG,OAAO,IACrDD,EAASA,EAAOE,MAAM,GAAG,GAEzB,EAAKxB,SAAS,CAACC,UAAUqB,EAAS,EAAKf,MAAMK,KAAKM,MAjCrD,EAAKX,MAAM,CACTN,UAAU,GACVW,KAAK,GACLa,QAAO,GALO,E,iDAsChB,WAAiB,IAAD,OACVC,EAAa,GAQjB,OANGpB,KAAKC,MAAMK,MACZN,KAAKC,MAAMK,KAAKe,KAAI,SAACC,EAAOC,GACxB,OAAOH,EAAWI,KAAK,oBAAgBC,WAAYF,EAAOG,QAAS,EAAKf,WAAjD,SAA8DW,GAArDC,OAI/BH,EAAWF,MAAM,EAAE,M,oBAG9B,WAEE,OACE,gCACM,yCACA,uBAAOS,KAAK,OAAOC,KAAK,YAAY/B,MAAOG,KAAKC,MAAMN,UAAWkC,SAAU7B,KAAKR,cAEhF,6BACGQ,KAAK8B,yB,GA3DFC,aCGlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1a7d73bb.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      inputWord:'',\n      data:[],\n      change:false\n    }\n  }\n\n  PredictWord=(e)=>{\n    this.setState({inputWord:e.target.value})\n    this.callService(e);\n   \n  }\n\n  callService=(e)=> {\n   \n    var para1='locale=da-DK';\n      \n    const Token='MjAyMS0xMC0zMQ==.ZmFyaGFkYXlhbkBnbWFpbC5jb20=.NzE3YmFmMmUyZTZkM2JkOTBlNGE4N2E4NTI2Nzk3YjQ=';\n    this.setState({inputWord:e.target.value},function(){\n    fetch ('https://services.lingapps.dk/misc/getPredictions?'+para1+'&text='+this.state.inputWord,\n          {headers: {\"Authorization\" : `Bearer `+Token}})\n          .then(response => response.json())\n          .then(data => {this.setState({data: data})})\n          .catch(error => console.log('failed to fetch', error))\n        })\n      }\n\n    selectWord=(e)=>{\n       let indexing=   e.target.getAttribute(\"data_index\");\n       let ind=this.state.inputWord.split(\" \");\n       var result=this.state.inputWord.split(ind[ind.length-1]);\n       result = result.slice(0,-1);\n       \n       this.setState({inputWord:result + this.state.data[indexing]});\n    }\n\n    renderListing() {\n      let recordList = [];\n\n      if(this.state.data){\n        this.state.data.map((record,index) => {\n            return recordList.push(<li key={index} data_index={index} onClick={this.selectWord}>{record}</li>)\n         \n        })\n      }\n      return recordList.slice(0,10);\n  }\n\n  render() {\n\n    return (\n      <div >\n            <label>Text</label>\n            <input type=\"text\" name=\"InputName\" value={this.state.inputWord} onChange={this.PredictWord}/>\n           \n            <ul>\n              {this.renderListing()}\n            </ul>\n           \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}